#include <iostream>
#include <string>
#include <exception>
using namespace std;

class InvalidRequestException {

public:
    InvalidRequestException(const string& msg) : msg_(msg) {}
    ~InvalidRequestException() {}

    string getMessage() const { return(msg_); }
private:
    string msg_;
};

class InvalidInputException {

public:
    InvalidInputException(const string& msg) : msg_(msg) {}
    ~InvalidInputException() {}

    string getMessage() const { return(msg_); }
private:
    string msg_;
};


template <typename T>
T GetValidData(T one, T two)
{
    T lower = one;
    T upper = two;
    T mid;

    if (lower > upper) // If boundries are wrong 
    {
        throw (InvalidRequestException("Error: Boundries not in correct high/low format"));
    }

    cout << "Enter value between the lower boundry " << lower << " and the high boundry " << upper << endl;
    cin >> mid;
    while(cin.fail())
    {
        cin.clear();
        cin.ignore(100, '\n');
        cout << "Error: Input Not Of Same Type" << endl;
        cout << "Enter Input Of Same Type";
        cin >> mid;
    }
    
    if (mid < lower || mid > upper) // If input not in bounds throw exception
    {
        throw  (InvalidInputException("Error: Input not in range"));
    }

    else // If success
    {
        cout << "Good Job! You can follow basic instructions" << endl;
    }
    return mid;
}

int main()
{
    int answerI = 0 ;
    float answerF = 0.0;
    string answerS = "Broke";

    try // Testing function with ints
    {
        answerI = GetValidData(1, 5);
    }
    catch (const InvalidRequestException& e)
    {
        cout << e.getMessage() << endl;
    }
    catch (const InvalidInputException& e)
    {
        cout << e.getMessage() << endl;
    }

    try // Testing function with float
    {
        answerF = GetValidData(1.0, 5.0);
    }
    catch (const InvalidRequestException& e)
    {
        cout << e.getMessage() << endl;
    }
    catch (const InvalidInputException& e)
    {
        cout << e.getMessage() << endl;
    }

    try // Testing function with strings
    {
        answerS = GetValidData("apple", "dog");
    }
    catch (const InvalidRequestException& e)
    {
        cout << e.getMessage() << endl;
    }
    catch (const InvalidInputException& e)
    {
        cout << e.getMessage() << endl;
    }
}
